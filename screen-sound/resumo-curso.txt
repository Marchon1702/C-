Escrevendo um "Hello World" no console

Imaginando que estamos criando uma aplicação para desktop e queremos immprimir 
algo no console, o c# usa o comando Console.WriteLine("Hello World!"); para escrever algo na 
tela, o WriteLine escreve e pula uma linha como se fosse o "escreval" do VisualG.

Lendo um valor informado pelo usuário

Para um valor informado pelo usuário, usamos o comando Console.ReadLine(); caso o valor
seja lido e não seja guardado em lugar nenhum, ele não faz sentido, então devemos atribuir
a leitura desse valor a uma variável.

Ex: string valoDigitado = Console.ReadLine();

Convertendo um valor para inteiro

Para converter um valor para inteiro podemos usar int.Parse(valorParaInteiro);
Atribuindo isso a uma variável temos 

Ex: int valorInteiro = int.Parse(valorParaInteiro);

Criando funções com C#

Primeiro declaramos oque essa função retorna, depois atribuiomos o nome da função

Ex: void MinhaFuncao() {
	// Lógica da função
}

void é a palavra reservada para dizer que não será retornado nada.

Estruturas condicionais em C#

if( 1 == 1) {
	Console.WriteLine("1 São iguais")
} else if (2 == 2){
	Console.WriteLine("2 São iguais")
} else {
	Console.WriteLine("Nenhum critério atendido")
}

Também temos o Switch 

Swtich (varivale) {
	case 1: "Seu valor é 1"
		break;
	case 2: "Seu valor é 2"
		break;
	default: "Valor diferente do esperado!"
		break;
}

As estruturas são bem parecidas com a sintaxe do javaScript, a única diferença é que em C#
não existe ===, pois ela já em uma linguagem fortemente tipada, então não é necessário verificar
tipos frequentemente como o caso do JS.

Mais comandos

Para limparmos a tela do nosso programa feito no terminal, 
podemos usar o comando: Console.Clear();

Para criarmos um timer como algo parecido com o setTimeOut do JavaScript basta usar o comando:
Thread.Sleep(1000); O argumento deve ser passado em milisegundos tbm.

Laços de repetição com for e foreach

Para fazer um laço de repetição com for é quase a mesma coisa de Js, a única diferença
é que ao invés de declararmos let, declaramos o tipo da varivael

Ex: 
	for(int i = 0; i < lista.Count; i++) {
		Console.WriteLine(lista[i]);
	}

Count é a forma de obter o cumprimento de uma lista, diferente do array que usamos length.




Oque é uma Lista em C#

Ela é igual a um array, porém ela não precisa receber um valor total de posições na sua atribuição.

Então quando teremos um conjunto de dados que não sabemos quantos espaços irão ocupar na memoria,
usamos Listas e quando sabemos quantos espaços esses dados irão ocupar, usamos arrays.

A declaração de uma lista é feita assim: 

List<TipoDeDados> listaDeAlgo = new List<TipoDeDados>();

Caso queiramos iniciar uma lista com alguns valores, o () sai, e usamos {"valor1", "valor2"};

Declarando um array com C#

int[] meuArray = new int[Quantidade de Espaços]

meuArray[0] = 1

Caso você já tenha todos os valores que serão atribuidos e deseja incializar o array com eles
você pode fazer

int[] meuArray = {1, 2, 3}

Esse é uma forma simplificada de escrever sem o new, e quantidades de espaços, pois os valores 
inseridos já dão essa informação.

